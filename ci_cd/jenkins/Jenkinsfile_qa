#!/usr/bin/groovy

pipeline {
    agent any

    options {
        disableConcurrentBuilds()
    }

    parameters {
        string(name: 'DOCKER_IMAGE_TAG', defaultValue: 'acruzr/spring-test-api')
        string(name: 'DOCKERFILE_PATH', defaultValue: 'ci_cd/docker/Dockerfile')
        string(name: 'DOCKER_CONTAINER_NAME', defaultValue: 'test_api')
        #this parameter should be provided in the pipeline and activate the job as parameterized
        string(name: 'JENKINSFILE_PATH', defaultValue: 'ci_cd/jenkins/Jenkinsfile_qa')
    }

    stages {
        stage("Build") {
            steps {
                sh "mvn clean package"
                buildApp()
            }
        }

        stage("Deploy - Dev") {
            steps {
                deployApp("dev")
            }
        }

        stage('Deploy - QA') {
            steps {
                deployApp('qa')
            }
        }

    }
}

def buildApp() {
    def appImage = docker.build("${DOCKER_IMAGE_TAG}:${BUILD_NUMBER}", "-f ${DOCKERFILE_PATH} .")
}

def deployApp(environment) {
    def containerName = "${DOCKER_CONTAINER_NAME}_${environment}"
    def port = ""

    if("${environment}" == "dev") {
        port = 8888
    } else if("${environment}" == 'qa'){
        port = 8484
    } else {
        println "Environment not valid"
        System.exit(0)
    }

    sh "docker ps -f name=${containerName} -q | xargs --no-run-if-empty docker stop"
    sh "docker ps -a -f name=${containerName} -q | xargs -r docker rm"
    sh "docker run -d -p ${port}:8080 --name ${containerName} ${DOCKER_IMAGE_TAG}:${BUILD_NUMBER}"
}
